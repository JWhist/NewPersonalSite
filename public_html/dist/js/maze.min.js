function initMap(){new google.maps.Map(document.getElementById("map"),{center:{lat:40.674,lng:-73.945},zoom:12,scrollwheel:!1,navigationControl:!1,mapTypeControl:!1,scaleControl:!1,styles:[{elementType:"geometry",stylers:[{color:"#242f3e"}]},{elementType:"labels.text.stroke",stylers:[{color:"#242f3e"}]},{elementType:"labels.text.fill",stylers:[{color:"#746855"}]},{featureType:"administrative.locality",elementType:"labels.text.fill",stylers:[{color:"#d59563"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#d59563"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#263c3f"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#6b9a76"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#38414e"}]},{featureType:"road",elementType:"geometry.stroke",stylers:[{color:"#212a37"}]},{featureType:"road",elementType:"labels.text.fill",stylers:[{color:"#9ca5b3"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#746855"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#1f2835"}]},{featureType:"road.highway",elementType:"labels.text.fill",stylers:[{color:"#f3d19c"}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#2f3948"}]},{featureType:"transit.station",elementType:"labels.text.fill",stylers:[{color:"#d59563"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#17263c"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#515c6d"}]},{featureType:"water",elementType:"labels.text.stroke",stylers:[{color:"#17263c"}]}]})}$(document).ready(function(){$(".navbar .nav-link").on("click",function(e){var t;""!==this.hash&&(e.preventDefault(),t=this.hash,$("html, body").animate({scrollTop:$(t).offset().top},700,function(){window.location.hash=t}))})}),$(window).on("load",function(){var t=$(".portfolio-container");t.isotope({filter:".new",animationOptions:{duration:750,easing:"linear",queue:!1}}),$(".filters a").click(function(){$(".filters .active").removeClass("active"),$(this).addClass("active");var e=$(this).attr("data-filter");return t.isotope({filter:e,animationOptions:{duration:750,easing:"linear",queue:!1}}),!1})});
const MAZE_ROWS=Math.floor(document.querySelector("#home").clientHeight),MAZE_COLS=Math.floor(document.querySelector("#home").clientWidth)/5,maze=(console.log(MAZE_ROWS,MAZE_COLS),document.querySelector(".maze"));function buildGrid(){for(let e=0;e<MAZE_ROWS;e++){var t=document.createElement("tr");t.classList.add("row");for(let l=0;l<MAZE_COLS;l++){var r=document.createElement("td");r.classList.add("cell","wall"),r.classList.add(`cell-${e}-`+l),grid[e][l]=-1,t.appendChild(r)}maze.appendChild(t)}}function getDocNode(l,e){return document.querySelector(`.cell-${l}-`+e)}function neighbors(l){var e=[l[0],l[1]-1],t=[l[0],l[1]+1],r=[l[0]-1,l[1]];return[e,[l[0]+1,l[1]],t,r]}function removeWall(l,e){grid[l][e]=0,getDocNode(l,e).classList.remove("wall")}function random_int(l,e){return l=Math.ceil(l),e=Math.floor(e),Math.floor(Math.random()*(e-l))+l}function isValid(l){return 0<l[0]&&l[0]<grid.length-1&&0<l[1]&&l[1]<grid[0].length-1}grid=new Array(MAZE_ROWS).fill(0).map(()=>new Array(MAZE_COLS).fill(0)),buildGrid();let currentCell=[1,1],wall_list=(removeWall(currentCell[0],currentCell[1]),getDocNode(currentCell[0],currentCell[1]).classList.add("visited"),grid[currentCell[0]][currentCell[1]]=1,[]),list=neighbors(currentCell);for(let l=0;l<list.length;l++)0<list[l][0]&&list[l][0]<grid.length-1&&0<list[l][1]&&list[l][1]<grid[0].length-1&&wall_list.push(list[l]);const interval=window.setInterval(function(){for(;;){if(0==wall_list.length)return void clearInterval(interval);var r=random_int(0,wall_list.length),i=wall_list[r];wall_list.splice(r,1);let l;l=i[0]%2==0?[[i[0]-1,i[1]],[i[0]+1,i[1]]]:[[i[0],i[1]-1],[i[0],i[1]+1]];let e,t=!1;if(grid[l[0][0]][l[0][1]]<1?(e=l[0],t=!0):grid[l[1][0]][l[1][1]]<1&&(e=l[1],t=!0),t){isValid(i)&&(getDocNode(i[0],i[1]).classList.add("visited"),removeWall(i[0],i[1])),isValid(e)&&(getDocNode(e[0],e[1]).classList.add("visited"),removeWall(e[0],e[1])),grid[e[0]][e[1]]=1;var n=neighbors(e,1);for(let l=0;l<n.length;l++)0<n[l][0]&&n[l][0]<grid.length-1&&0<n[l][1]&&n[l][1]<grid[0].length-1&&wall_list.push(n[l]);return}}},28);